{"ast":null,"code":"var _jsxFileName = \"/home/nsr/skribbl-/chatfrontend/src/game/chat/chat.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/*import \"./chat.scss\";\nimport { to_Decrypt, to_Encrypt } from \"../aes.js\";\nimport { process } from \"../store/action/index\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";*/\n//gets the data from the action object and reducers defined earlier\nfunction Chat({\n  username,\n  roomname,\n  socket\n}) {\n  _s();\n\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const dispatch = useDispatch();\n\n  const dispatchProcess = (encrypt, msg, cipher) => {\n    dispatch(process(encrypt, msg, cipher));\n  };\n\n  useEffect(() => {\n    socket.on(\"message\", data => {\n      //decypt the message\n      const ans = to_Decrypt(data.text, data.username);\n      dispatchProcess(false, ans, data.text);\n      console.log(ans);\n      let temp = messages;\n      temp.push({\n        userId: data.userId,\n        username: data.username,\n        text: ans\n      });\n      setMessages([...temp]);\n    });\n  }, [socket]);\n\n  const sendData = () => {\n    if (text !== \"\") {\n      //encrypt the message here\n      const ans = to_Encrypt(text);\n      socket.emit(\"chat\", ans);\n      setText(\"\");\n    }\n  };\n\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n  console.log(messages, \"mess\");\n  /*  <div className=\"chat\">\n      <div className=\"user-name\">\n      <ceter>\n        <h2>\n            Skribbl Skribbl\n        </h2>\n      </ceter>\n      </div>\n      <div className=\"chat-message\">\n        {messages.map((i) => {\n          if (i.username === username) {\n            return (\n              <div className=\"message mess-right\">\n                <p>{i.text}</p>\n                <span>{i.username}</span>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"message\">\n                <p>{i.text} </p>\n                <span>{i.username}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"send\">\n        <input\n          placeholder=\"Type your answer here\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              sendData();\n            }\n          }}\n        ></input>\n        <button onClick={sendData}>Send</button>\n      </div>\n        </div>*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Idhar Chat aaega\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 8\n  }, this);\n}\n\n_c = Chat;\n\n_s(Chat, \"5mvMrzYw9NPtaL4PTZPMEMf1yOk=\", true);\n\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/nsr/skribbl-/chatfrontend/src/game/chat/chat.js"],"names":["Chat","username","roomname","socket","text","setText","useState","messages","setMessages","dispatch","useDispatch","dispatchProcess","encrypt","msg","cipher","process","useEffect","on","data","ans","to_Decrypt","console","log","temp","push","userId","sendData","to_Encrypt","emit","messagesEndRef","useRef","scrollToBottom","current","scrollIntoView","behavior"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,CAAc;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,QAAZ;AAAsBC,EAAAA;AAAtB,CAAd,EAA8C;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BF,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMG,QAAQ,GAAGC,WAAW,EAA5B;;AAEA,QAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,MAAf,KAA0B;AAChDL,IAAAA,QAAQ,CAACM,OAAO,CAACH,OAAD,EAAUC,GAAV,EAAeC,MAAf,CAAR,CAAR;AACD,GAFD;;AAIAE,EAAAA,SAAS,CAAC,MAAM;AACdb,IAAAA,MAAM,CAACc,EAAP,CAAU,SAAV,EAAsBC,IAAD,IAAU;AAC7B;AACA,YAAMC,GAAG,GAAGC,UAAU,CAACF,IAAI,CAACd,IAAN,EAAYc,IAAI,CAACjB,QAAjB,CAAtB;AACAU,MAAAA,eAAe,CAAC,KAAD,EAAQQ,GAAR,EAAaD,IAAI,CAACd,IAAlB,CAAf;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,UAAII,IAAI,GAAGhB,QAAX;AACAgB,MAAAA,IAAI,CAACC,IAAL,CAAU;AACRC,QAAAA,MAAM,EAAEP,IAAI,CAACO,MADL;AAERxB,QAAAA,QAAQ,EAAEiB,IAAI,CAACjB,QAFP;AAGRG,QAAAA,IAAI,EAAEe;AAHE,OAAV;AAKAX,MAAAA,WAAW,CAAC,CAAC,GAAGe,IAAJ,CAAD,CAAX;AACD,KAZD;AAaD,GAdQ,EAcN,CAACpB,MAAD,CAdM,CAAT;;AAgBA,QAAMuB,QAAQ,GAAG,MAAM;AACrB,QAAItB,IAAI,KAAK,EAAb,EAAiB;AACf;AACA,YAAMe,GAAG,GAAGQ,UAAU,CAACvB,IAAD,CAAtB;AACAD,MAAAA,MAAM,CAACyB,IAAP,CAAY,MAAZ,EAAoBT,GAApB;AACAd,MAAAA,OAAO,CAAC,EAAD,CAAP;AACD;AACF,GAPD;;AAQA,QAAMwB,cAAc,GAAGC,MAAM,CAAC,IAAD,CAA7B;;AAEA,QAAMC,cAAc,GAAG,MAAM;AAC3BF,IAAAA,cAAc,CAACG,OAAf,CAAuBC,cAAvB,CAAsC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAtC;AACD,GAFD;;AAIAlB,EAAAA,SAAS,CAACe,cAAD,EAAiB,CAACxB,QAAD,CAAjB,CAAT;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAYf,QAAZ,EAAsB,MAAtB;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBAAO;AAAA,2BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,UAAP;AAEC;;KAzFQP,I;;GAAAA,I;;AA0FT,eAAeA,IAAf","sourcesContent":["/*import \"./chat.scss\";\nimport { to_Decrypt, to_Encrypt } from \"../aes.js\";\nimport { process } from \"../store/action/index\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";*/\n//gets the data from the action object and reducers defined earlier\nfunction Chat({ username, roomname, socket }) {\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  const dispatch = useDispatch();\n  \n  const dispatchProcess = (encrypt, msg, cipher) => {\n    dispatch(process(encrypt, msg, cipher));\n  };\n\n  useEffect(() => {\n    socket.on(\"message\", (data) => {\n      //decypt the message\n      const ans = to_Decrypt(data.text, data.username);\n      dispatchProcess(false, ans, data.text);\n      console.log(ans);\n      let temp = messages;\n      temp.push({\n        userId: data.userId,\n        username: data.username,\n        text: ans,\n      });\n      setMessages([...temp]);\n    });\n  }, [socket]);\n\n  const sendData = () => {\n    if (text !== \"\") {\n      //encrypt the message here\n      const ans = to_Encrypt(text);\n      socket.emit(\"chat\", ans);\n      setText(\"\");\n    }\n  };\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  console.log(messages, \"mess\");\n\n  \n  /*  <div className=\"chat\">\n      <div className=\"user-name\">\n      <ceter>\n        <h2>\n            Skribbl Skribbl\n        </h2>\n      </ceter>\n      </div>\n      <div className=\"chat-message\">\n        {messages.map((i) => {\n          if (i.username === username) {\n            return (\n              <div className=\"message mess-right\">\n                <p>{i.text}</p>\n                <span>{i.username}</span>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"message\">\n                <p>{i.text} </p>\n                <span>{i.username}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"send\">\n        <input\n          placeholder=\"Type your answer here\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              sendData();\n            }\n          }}\n        ></input>\n        <button onClick={sendData}>Send</button>\n      </div>\n        </div>*/\nreturn(<div><h2>Idhar Chat aaega</h2></div>\n  );\n}\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}