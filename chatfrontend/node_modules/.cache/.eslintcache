[{"/home/nsr/new/skribbl-/chatfrontend/src/index.js":"1","/home/nsr/new/skribbl-/chatfrontend/src/App.js":"2","/home/nsr/new/skribbl-/chatfrontend/src/store/reducer/index.js":"3","/home/nsr/new/skribbl-/chatfrontend/src/home/home.js":"4","/home/nsr/new/skribbl-/chatfrontend/src/game/game.js":"5","/home/nsr/new/skribbl-/chatfrontend/src/store/reducer/process.js":"6","/home/nsr/new/skribbl-/chatfrontend/src/game/words/words.js":"7","/home/nsr/new/skribbl-/chatfrontend/src/game/scores/scores.js":"8","/home/nsr/new/skribbl-/chatfrontend/src/game/chat/chat.js":"9","/home/nsr/new/skribbl-/chatfrontend/src/game/timer/timer.js":"10","/home/nsr/new/skribbl-/chatfrontend/src/game/canvas/canvas.js":"11"},{"size":435,"mtime":1638019032687,"results":"12","hashOfConfig":"13"},{"size":1125,"mtime":1638019262967,"results":"14","hashOfConfig":"13"},{"size":290,"mtime":1638019032687,"results":"15","hashOfConfig":"13"},{"size":2626,"mtime":1638019262967,"results":"16","hashOfConfig":"13"},{"size":4691,"mtime":1638022969867,"results":"17","hashOfConfig":"13"},{"size":291,"mtime":1638019032687,"results":"18","hashOfConfig":"13"},{"size":339,"mtime":1638019262967,"results":"19","hashOfConfig":"13"},{"size":660,"mtime":1638019262967,"results":"20","hashOfConfig":"13"},{"size":1948,"mtime":1638019262967,"results":"21","hashOfConfig":"13"},{"size":1320,"mtime":1638019262967,"results":"22","hashOfConfig":"13"},{"size":3122,"mtime":1638019262967,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"u06hka",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/home/nsr/new/skribbl-/chatfrontend/src/index.js",[],["51","52"],"/home/nsr/new/skribbl-/chatfrontend/src/App.js",[],"/home/nsr/new/skribbl-/chatfrontend/src/store/reducer/index.js",[],"/home/nsr/new/skribbl-/chatfrontend/src/home/home.js",[],"/home/nsr/new/skribbl-/chatfrontend/src/game/game.js",["53"],"import './game.scss';\r\nimport React,{useEffect, useState} from 'react';\r\nimport Scores from './scores/scores';\r\nimport Canvas from './canvas/canvas';\r\nimport Chat from './chat/chat';\r\nimport Words from './words/words';\r\nimport Timer from './timer/timer';\r\nconst worddict = require('./words/words.json');\r\n\r\nfunction Game({user,socket}){\r\n    //-------------------------Words--------------------------//\r\n    const [currentword,setcurrentword] = useState(\"Kaddu\");\r\n    const [popup,setpopup] = useState(true);\r\n    const [current_drawer,setcurrent_drawer] = useState(null);\r\n    const [badlu,setbadlu] = useState(true);\r\n    function generate_random_word(){\r\n        return worddict.english[parseInt(Math.random()*worddict.english.length)];\r\n    }\r\n    var s1=generate_random_word();\r\n    var s2=generate_random_word();\r\n    var s3=generate_random_word();\r\n    function set_random_word(s){\r\n        setcurrentword(s);\r\n        setpopup(false);\r\n    }\r\n    /*//---------------------------------------------------------//\r\n    const [userlist, setUserList] = useState([]);\r\n    const [current_drawer,setcurrent_drawer] = useState(user_id)\r\n    const [current_round,setcurrent_round] = useState(round_number) round_number == userlist ki index\r\n    //---------------------------------------------------------//*/\r\n    useEffect(()=>{\r\n        generate_random_word();\r\n        console.log(\"Yeh user mila hai mujhe :\",user);\r\n        socket.emit(\"get_current_drawer\",user.room);\r\n        socket.on(\"received_active_user\",(data)=>{\r\n            setcurrent_drawer(data.current_user);\r\n        });\r\n    },[badlu]);\r\n    //-----------------------------------------------------------//\r\n \r\n    socket.on(\"active_user_updated\",() =>{\r\n        setbadlu(!badlu);\r\n    })    \r\n    function sub_round_over(){\r\n        socket.emit(\"update_active_user\",user.room);\r\n    }\r\n    //-----------------------------------------------------------//\r\n\r\n\r\n\r\n    return(  \r\n        <div>\r\n            {\r\n                current_drawer!==null?\r\n                <div>\r\n                    <div className='Game'>\r\n                        <div>\r\n                            <Timer\r\n                                user={user}\r\n                                socket={socket}\r\n                                drawer={current_drawer}\r\n                                timelimit={20}\r\n                            />\r\n                        </div>\r\n                        <div className='left'>\r\n                            <Scores\r\n                                roomname={user.room}\r\n                                socket={socket}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <div>\r\n                                {popup?\r\n                                    <div>\r\n                                        <button onClick={()=>set_random_word(s1)}>{s1}</button>\r\n                                        <button onClick={()=>set_random_word(s2)}>{s2}</button>\r\n                                        <button onClick={()=>set_random_word(s3)}>{s3}</button>\r\n                                    </div>\r\n                                    :null\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={()=>sub_round_over()}>Next Round</button>\r\n                            </div>\r\n                            <div>\r\n                                <Words\r\n                                    user={user}\r\n                                    drawer={current_drawer}\r\n                                    currentword={currentword}\r\n                                    />\r\n                            </div>\r\n                            <div>\r\n                                <Canvas\r\n                                    user={user}\r\n                                    socket={socket}\r\n                                    drawer={current_drawer}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className='right'>\r\n                            <Chat\r\n                                username={user.username} \r\n                                socket={socket}\r\n                                currentword={currentword}\r\n                            /> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <h2>\r\n                        Loading...2\r\n                    </h2>\r\n                </div>\r\n            }\r\n        </div>    \r\n    );\r\n}\r\n\r\nexport default Game;\r\n\r\n\r\n","/home/nsr/new/skribbl-/chatfrontend/src/store/reducer/process.js",[],"/home/nsr/new/skribbl-/chatfrontend/src/game/words/words.js",[],"/home/nsr/new/skribbl-/chatfrontend/src/game/scores/scores.js",["54"],"import \"./scores.scss\";\nimport { useState, useEffect } from \"react\";\nfunction Scores({ socket, roomname }) {\n  const [userlist, setUserList] = useState([]);\n  useEffect(()=>{\n    socket.emit(\"updateusers\")\n    socket.on(\"userList\",(data)=>{\n      var temp = [];\n      data.users.forEach(names);\n      function names(value){\n        if(value.room === roomname){\n          temp.push(value.username)\n        }\n      }\n      setUserList([...temp])\n    })\n  },[])\n return(\n    <div class=\"scores\">\n      <h1>Players</h1>\n      {userlist.map((i) => {\n          return(\n            <h2>{i}</h2>\n          );\n        })}\n      </div>\n      );\n}\nexport default Scores;\n","/home/nsr/new/skribbl-/chatfrontend/src/game/chat/chat.js",["55"],"import \"./chat.scss\";\nimport React, { useState, useEffect, useRef } from \"react\";\nfunction Chat({ username, socket,currentword }) {\n  const [text, setText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"message\", (data) => {\n\n      let temp = messages;\n      temp.push({\n        userId: data.userId,\n        username: data.username,\n        text: data.text,\n      });\n      setMessages([...temp]);\n    });\n  }, [socket]);\n\n  const sendData = () => {\n    if (text !== \"\") {\n      \n      socket.emit(\"chat\",text);\n      setText(\"\");\n    }\n  };\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(scrollToBottom, [messages]);\n\n  console.log(messages, \"mess\");\n\n  return(\n    <div className=\"chat\">\n      <div className=\"user-name\">\n      <ceter>\n        <h2>\n            {currentword}\n        </h2>\n      </ceter>\n      </div>\n      <div className=\"chat-message\">\n        {messages.map((i) => {\n          if (i.username === username) {\n            return (\n              <div className=\"message mess-right\">\n                <p>{i.text}</p>\n                <span>{i.username}</span>\n              </div>\n            );\n          } else {\n            return (\n              <div className=\"message\">\n                <p>{i.text} </p>\n                <span>{i.username}</span>\n              </div>\n            );\n          }\n        })}\n        <div ref={messagesEndRef} />\n      </div>\n      <div className=\"send\">\n        <input\n          placeholder=\"Type your answer here\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              sendData();\n            }\n          }}\n        ></input>\n        <button onClick={sendData}>Send</button>\n      </div>\n        </div>\n  );\n}\nexport default Chat;\n","/home/nsr/new/skribbl-/chatfrontend/src/game/timer/timer.js",["56"],"import React, { useState, useEffect } from \"react\";\n\n\nconst Timer = ({timelimit,socket,user,drawer}) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  socket.on(\"time_change\",(data)=>{\n    setSeconds(data.seconds)\n  });\n  function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(() => {    \n    let interval = null;\n    if (isActive) {\n      if(seconds<timelimit){\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n      }\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n  if(user.id===drawer.id){\n    socket.emit(\"time\",seconds)\n    if(seconds>timelimit){\n      reset()\n    }\n    return(\n      <div>\n        <div>\n          {timelimit - seconds}s\n        </div>\n        <div>\n          <button onClick={toggle}>\n            {isActive ? 'Pause' : 'Start'}\n          </button>\n          <button onClick={reset}>\n            Reset\n          </button>\n        </div>\n      </div>\n    );\n  }\n  else{\n    return(\n      <div>\n        <div>\n          {timelimit - seconds}s\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Timer;\n\n","/home/nsr/new/skribbl-/chatfrontend/src/game/canvas/canvas.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":38,"column":7,"nodeType":"63","endLine":38,"endColumn":14,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":17,"column":5,"nodeType":"63","endLine":17,"endColumn":7,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"67","line":18,"column":6,"nodeType":"63","endLine":18,"endColumn":14,"suggestions":"68"},{"ruleId":"61","severity":1,"message":"69","line":31,"column":6,"nodeType":"63","endLine":31,"endColumn":25,"suggestions":"70"},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'socket' and 'user'. Either include them or remove the dependency array.","ArrayExpression",["73"],"React Hook useEffect has missing dependencies: 'roomname' and 'socket'. Either include them or remove the dependency array.",["74"],"React Hook useEffect has a missing dependency: 'messages'. Either include it or remove the dependency array.",["75"],"React Hook useEffect has a missing dependency: 'timelimit'. Either include it or remove the dependency array.",["76"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [badlu, socket, user]",{"range":"85","text":"86"},"Update the dependencies array to be: [roomname, socket]",{"range":"87","text":"88"},"Update the dependencies array to be: [messages, socket]",{"range":"89","text":"90"},"Update the dependencies array to be: [isActive, seconds, timelimit]",{"range":"91","text":"92"},[1596,1603],"[badlu, socket, user]",[455,457],"[roomname, socket]",[464,472],"[messages, socket]",[735,754],"[isActive, seconds, timelimit]"]