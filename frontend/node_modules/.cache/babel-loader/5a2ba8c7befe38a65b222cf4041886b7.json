{"ast":null,"code":"var _jsxFileName = \"/home/dhairya/Desktop/Scribble/skribbl-/frontend/src/game/timer/timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = ({\n  timelimit,\n  socket,\n  user,\n  drawer\n}) => {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  useEffect(() => {\n    let interval = null;\n\n    if (seconds < timelimit && isActive) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    } else if (seconds >= timelimit && isActive) {\n      if (user.id === drawer.id) {\n        socket.emit(\"time_over\", user.room);\n      }\n\n      reset();\n    }\n\n    return () => clearInterval(interval);\n  }, [isActive, seconds, timelimit]);\n  socket.on(\"Timer_On\", () => {\n    setIsActive(true);\n  });\n  socket.on(\"get_current_time\", () => {\n    socket.emit(\"Receive_current_time\", seconds);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [timelimit - seconds, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Timer, \"HjAIbd49zoP8n+oOlWwUpn38Z08=\");\n\n_c = Timer;\nexport default Timer;\n/*\nconst Timer = ({timelimit,socket,user,drawer}) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  /*function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  socket.on(\"time_change\",(data)=>{\n    setSeconds(data.seconds)\n  });\n\n\n  socket.on(\"Start_Timer\",() => {\n    reset();\n    setIsActive(true);\n  })\n\n socket.on(\"Reset_Timer\",() =>{\n   reset();\n }) \n  \n else if(seconds === timelimit && isActive){\n      if(user.id === drawer.id){\n      socket.emit(\"time_over\",user.room);\n      socket.emit(\"update_score\")}\n      setSeconds(0);\n      setIsActive(false);\n      clearInterval(interval);\n    }\n  \n/*  useEffect(() => {    \n    let interval = null;\n    if (isActive) {\n      if(seconds<timelimit){\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n      }\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds, timelimit]);\n\n  useEffect(() => {    \n    let interval = null;\n      if(seconds<timelimit && isActive){\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n     //   console.log(\"second ki value jo jaa raahi hai :\",seconds);\n   //     socket.emit(\"time_now\", {room:user.room,time:seconds});\n      }\n      else if(seconds === timelimit && isActive){\n        if(user.id === drawer.id){\n        socket.emit(\"time_over\",user.room);\n        socket.emit(\"update_score\")}\n        setSeconds(0);\n        setIsActive(false);\n        clearInterval(interval);\n      }\n    return () => clearInterval(interval);\n  }, [isActive,seconds, timelimit]);\n\n  return(\n      <div>\n        <div>\n          {timelimit - seconds}s\n        </div>\n      </div>\n    );\n  };\n\nexport default Timer;\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/dhairya/Desktop/Scribble/skribbl-/frontend/src/game/timer/timer.js"],"names":["React","useState","useEffect","Timer","timelimit","socket","user","drawer","seconds","setSeconds","isActive","setIsActive","reset","interval","setInterval","id","emit","room","clearInterval","on"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAWC,EAAAA,MAAX;AAAkBC,EAAAA,IAAlB;AAAuBC,EAAAA;AAAvB,CAAD,KAAoC;AAAA;;AAChD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,KAAD,CAAxC;;AACA,WAASW,KAAT,GAAiB;AACfH,IAAAA,UAAU,CAAC,CAAD,CAAV;AACAE,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AACDT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIW,QAAQ,GAAG,IAAf;;AACA,QAAGL,OAAO,GAACJ,SAAR,IAAqBM,QAAxB,EAAiC;AAC/BG,MAAAA,QAAQ,GAAGC,WAAW,CAAC,MAAM;AAC3BL,QAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGD,KAJD,MAKK,IAAGA,OAAO,IAAEJ,SAAT,IAAsBM,QAAzB,EAAkC;AACrC,UAAGJ,IAAI,CAACS,EAAL,KAAUR,MAAM,CAACQ,EAApB,EAAuB;AACrBV,QAAAA,MAAM,CAACW,IAAP,CAAY,WAAZ,EAAwBV,IAAI,CAACW,IAA7B;AACD;;AACDL,MAAAA,KAAK;AACN;;AACD,WAAO,MAAMM,aAAa,CAACL,QAAD,CAA1B;AACD,GAdQ,EAcN,CAACH,QAAD,EAAUF,OAAV,EAAmBJ,SAAnB,CAdM,CAAT;AAgBAC,EAAAA,MAAM,CAACc,EAAP,CAAU,UAAV,EAAqB,MAAI;AACvBR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAFD;AAGAN,EAAAA,MAAM,CAACc,EAAP,CAAU,kBAAV,EAA6B,MAAI;AAC/Bd,IAAAA,MAAM,CAACW,IAAP,CAAY,sBAAZ,EAAmCR,OAAnC;AACD,GAFD;AAGA,sBACI;AAAA,2BACE;AAAA,iBACGJ,SAAS,GAAGI,OADf;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAOC,CApCH;;GAAML,K;;KAAAA,K;AAsCN,eAAeA,KAAf;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst Timer = ({timelimit,socket,user,drawer}) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n  useEffect(() => {\n    let interval = null;\n    if(seconds<timelimit && isActive){\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds + 1);\n      }, 1000);\n    }\n    else if(seconds>=timelimit && isActive){\n      if(user.id===drawer.id){\n        socket.emit(\"time_over\",user.room);\n      }\n      reset()\n    }\n    return () => clearInterval(interval);\n  }, [isActive,seconds, timelimit]);\n  \n  socket.on(\"Timer_On\",()=>{\n    setIsActive(true);\n  })\n  socket.on(\"get_current_time\",()=>{\n    socket.emit(\"Receive_current_time\",seconds)\n  })\n  return(\n      <div>\n        <div>\n          {timelimit - seconds}s\n        </div>\n      </div>\n    );\n  };\n\nexport default Timer;\n\n\n\n/*\nconst Timer = ({timelimit,socket,user,drawer}) => {\n  const [seconds, setSeconds] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n\n  /*function toggle() {\n    setIsActive(!isActive);\n  }\n\n  function reset() {\n    setSeconds(0);\n    setIsActive(false);\n  }\n\n  socket.on(\"time_change\",(data)=>{\n    setSeconds(data.seconds)\n  });\n\n\n  socket.on(\"Start_Timer\",() => {\n    reset();\n    setIsActive(true);\n  })\n\n socket.on(\"Reset_Timer\",() =>{\n   reset();\n }) \n  \n else if(seconds === timelimit && isActive){\n      if(user.id === drawer.id){\n      socket.emit(\"time_over\",user.room);\n      socket.emit(\"update_score\")}\n      setSeconds(0);\n      setIsActive(false);\n      clearInterval(interval);\n    }\n  \n/*  useEffect(() => {    \n    let interval = null;\n    if (isActive) {\n      if(seconds<timelimit){\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n      }\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds, timelimit]);\n\n  useEffect(() => {    \n    let interval = null;\n      if(seconds<timelimit && isActive){\n        interval = setInterval(() => {\n          setSeconds(seconds => seconds + 1);\n        }, 1000);\n     //   console.log(\"second ki value jo jaa raahi hai :\",seconds);\n   //     socket.emit(\"time_now\", {room:user.room,time:seconds});\n      }\n      else if(seconds === timelimit && isActive){\n        if(user.id === drawer.id){\n        socket.emit(\"time_over\",user.room);\n        socket.emit(\"update_score\")}\n        setSeconds(0);\n        setIsActive(false);\n        clearInterval(interval);\n      }\n    return () => clearInterval(interval);\n  }, [isActive,seconds, timelimit]);\n\n  return(\n      <div>\n        <div>\n          {timelimit - seconds}s\n        </div>\n      </div>\n    );\n  };\n\nexport default Timer;\n\n*/"]},"metadata":{},"sourceType":"module"}